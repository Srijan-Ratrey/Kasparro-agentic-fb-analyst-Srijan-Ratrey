"""
Report generation system for the Agentic Facebook Performance Analyst.
"""

import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from pathlib import Path
import os

logger = logging.getLogger(__name__)


class ReportGenerator:
    """Generates structured reports from analysis results."""
    
    def __init__(self, output_dir: str = "reports"):
        """Initialize report generator."""
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Ensure subdirectories exist
        (self.output_dir / "observability").mkdir(exist_ok=True)

    def _safe_get(self, obj: Any, key: str, default: Any = None) -> Any:
        """Safely get a key from a mapping-like object.

        Returns default if obj is not a mapping or does not support .get().
        """
        try:
            # Works for dict-like objects
            return obj.get(key, default)
        except Exception:
            return default
    
    def generate_report(self, analysis_results: Dict[str, Any], query: str) -> Dict[str, str]:
        """Generate comprehensive report from analysis results."""
        logger.info("Generating comprehensive report")
        
        # Generate markdown report
        markdown_report = self._generate_markdown_report(analysis_results, query)
        
        # Generate insights JSON
        insights_json = self._generate_insights_json(analysis_results)
        
        # Generate creatives JSON
        creatives_json = self._generate_creatives_json(analysis_results)
        
        # Write files
        report_files = {}
        
        # Write markdown report
        markdown_path = self.output_dir / "report.md"
        with open(markdown_path, 'w', encoding='utf-8') as f:
            f.write(markdown_report)
        report_files["markdown"] = str(markdown_path)
        
        # Write insights JSON
        insights_path = self.output_dir / "insights.json"
        with open(insights_path, 'w', encoding='utf-8') as f:
            json.dump(insights_json, f, indent=2, ensure_ascii=False)
        report_files["insights"] = str(insights_path)
        
        # Write creatives JSON
        creatives_path = self.output_dir / "creatives.json"
        with open(creatives_path, 'w', encoding='utf-8') as f:
            json.dump(creatives_json, f, indent=2, ensure_ascii=False)
        report_files["creatives"] = str(creatives_path)
        
        logger.info(f"Report generated successfully: {report_files}")
        return report_files
    
    def _generate_markdown_report(self, analysis_results: Dict[str, Any], query: str) -> str:
        """Generate markdown report."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""# Facebook Ads Performance Analysis Report

**Query:** {query}  
**Generated:** {timestamp}  
**Analysis ID:** {analysis_results.get('query', 'unknown')}

---

## Executive Summary

{self._generate_executive_summary(analysis_results)}

---

## Key Findings

{self._generate_key_findings(analysis_results)}

---

## Performance Metrics

{self._generate_performance_metrics(analysis_results)}

---

## Insights and Recommendations

{self._generate_insights_section(analysis_results)}

---

## Creative Recommendations

{self._generate_creative_recommendations(analysis_results)}

---

## Technical Details

{self._generate_technical_details(analysis_results)}

---

## Next Steps

{self._generate_next_steps(analysis_results)}

---

*Report generated by Agentic Facebook Performance Analyst v1.0*
"""
        return report
    
    def _generate_executive_summary(self, analysis_results: Dict[str, Any]) -> str:
        """Generate executive summary."""
        summary = analysis_results.get("summary", {})
        
        if not summary:
            return "No executive summary available."
        
        key_findings = summary.get("key_findings", [])
        recommendations = summary.get("recommendations", [])
        confidence_level = summary.get("confidence_level", "unknown")
        
        summary_text = f"""
**Confidence Level:** {confidence_level.title()}

**Key Findings:**
"""
        
        for i, finding in enumerate(key_findings[:3], 1):
            summary_text += f"{i}. {finding}\n"
        
        if recommendations:
            summary_text += "\n**Top Recommendations:**\n"
            for i, rec in enumerate(recommendations[:3], 1):
                summary_text += f"{i}. {rec}\n"
        
        return summary_text
    
    def _generate_key_findings(self, analysis_results: Dict[str, Any]) -> str:
        """Generate key findings section."""
        results = analysis_results.get("results", {})
        
        if not results:
            return "No key findings available."
        
        findings_text = ""
        
        # Data analysis findings
        if "data_analysis" in results:
            data_analysis = results["data_analysis"]
            if "metrics" in data_analysis:
                metrics = data_analysis["metrics"]
                if "overall" in metrics:
                    overall = metrics["overall"]
                    # Use safe accessor in case overall is a scalar or unexpected type
                    findings_text += f"""
### Overall Performance
- **Total Spend:** ${self._safe_get(overall, 'total_spend', 0):,.2f}
- **Total Revenue:** ${self._safe_get(overall, 'total_revenue', 0):,.2f}
- **Average ROAS:** {self._safe_get(overall, 'avg_roas', 0):.2f}
- **Average CTR:** {self._safe_get(overall, 'avg_ctr', 0):.3f}
- **Conversion Rate:** {self._safe_get(overall, 'conversion_rate', 0):.3f}
"""
        
        # Trend findings
        if "data_analysis" in results and "trends" in results["data_analysis"]:
            trends = results["data_analysis"]["trends"]
            findings_text += "\n### Trend Analysis\n"
            for metric, trend_data in trends.items():
                change_percent = self._safe_get(trend_data, "change_percent", 0)
                direction = "increasing" if change_percent > 0 else "decreasing"
                findings_text += f"- **{metric.upper()}:** {direction} by {abs(change_percent):.1f}%\n"
        
        # Anomaly findings
        if "data_analysis" in results and "anomalies" in results["data_analysis"]:
            anomalies = results["data_analysis"]["anomalies"]
            if anomalies:
                findings_text += f"\n### Anomalies Detected\n"
                findings_text += f"- **Total Anomalies:** {len(anomalies)}\n"
                high_severity = len([a for a in anomalies if self._safe_get(a, "severity") == "high"])
                if high_severity > 0:
                    findings_text += f"- **High Severity:** {high_severity}\n"
        
        return findings_text
    
    def _generate_performance_metrics(self, analysis_results: Dict[str, Any]) -> str:
        """Generate performance metrics section."""
        results = analysis_results.get("results", {})
        
        if not results or "data_analysis" not in results:
            return "No performance metrics available."
        
        data_analysis = results["data_analysis"]
        metrics_text = ""
        
        # Campaign performance
        if "campaign_analysis" in data_analysis:
            campaign_analysis = data_analysis["campaign_analysis"]
            campaigns = campaign_analysis.get("campaigns", [])
            
            if campaigns:
                metrics_text += "### Campaign Performance\n\n"
                metrics_text += "| Campaign | Spend | Revenue | ROAS | CTR |\n"
                metrics_text += "|----------|-------|---------|------|-----|\n"
                
                for campaign in campaigns[:5]:  # Top 5 campaigns
                    metrics_text += f"| {campaign['campaign_name']} | ${campaign['spend']:,.2f} | ${campaign['revenue']:,.2f} | {campaign['roas']:.2f} | {campaign['ctr']:.3f} |\n"
        
        # Audience performance
        if "audience_analysis" in data_analysis:
            audience_analysis = data_analysis["audience_analysis"]
            audiences = audience_analysis.get("audiences", [])
            
            if audiences:
                metrics_text += "\n### Audience Performance\n\n"
                metrics_text += "| Audience Type | Spend | Revenue | ROAS | CTR |\n"
                metrics_text += "|---------------|-------|---------|------|-----|\n"
                
                for audience in audiences:
                    metrics_text += f"| {audience['audience_type']} | ${audience['spend']:,.2f} | ${audience['revenue']:,.2f} | {audience['roas']:.2f} | {audience['ctr']:.3f} |\n"
        
        # Platform performance
        if "platform_analysis" in data_analysis:
            platform_analysis = data_analysis["platform_analysis"]
            platforms = platform_analysis.get("platforms", [])
            
            if platforms:
                metrics_text += "\n### Platform Performance\n\n"
                metrics_text += "| Platform | Spend | Revenue | ROAS | CTR |\n"
                metrics_text += "|----------|-------|---------|------|-----|\n"
                
                for platform in platforms:
                    metrics_text += f"| {platform['platform']} | ${platform['spend']:,.2f} | ${platform['revenue']:,.2f} | {platform['roas']:.2f} | {platform['ctr']:.3f} |\n"
        
        return metrics_text
    
    def _generate_insights_section(self, analysis_results: Dict[str, Any]) -> str:
        """Generate insights section."""
        results = analysis_results.get("results", {})
        
        if not results or "insight_generation" not in results:
            return "No insights available."
        
        insight_generation = results["insight_generation"]
        insights = insight_generation.get("insights", [])
        
        if not insights:
            return "No insights generated."
        
        insights_text = ""
        
        # Group insights by type. Accept both dict-shaped insights and plain strings
        insight_types = {}
        for insight in insights:
            if isinstance(insight, str):
                # Normalize simple string insights into a dict for display
                insight = {
                    "type": "general",
                    "category": "general",
                    "insight": insight,
                    "confidence": 0.5,
                    "impact": "neutral"
                }
            insight_type = insight.get("type", "unknown")
            if insight_type not in insight_types:
                insight_types[insight_type] = []
            insight_types[insight_type].append(insight)
        
        for insight_type, type_insights in insight_types.items():
            insights_text += f"### {insight_type.title()} Insights\n\n"
            
            for insight in type_insights:
                category = insight.get("category", "unknown")
                insight_text = insight.get("insight", "")
                confidence = insight.get("confidence", 0)
                impact = insight.get("impact", "neutral")
                
                insights_text += f"**{category.replace('_', ' ').title()}** (Confidence: {confidence:.2f}, Impact: {impact})\n"
                insights_text += f"- {insight_text}\n\n"
        
        return insights_text
    
    def _generate_creative_recommendations(self, analysis_results: Dict[str, Any]) -> str:
        """Generate creative recommendations section."""
        results = analysis_results.get("results", {})
        
        if not results or "creative_recommendations" not in results:
            return "No creative recommendations available."
        
        creative_recommendations = results["creative_recommendations"]
        recommendations = creative_recommendations.get("recommendations", [])
        creative_suggestions = creative_recommendations.get("creative_suggestions", [])
        
        recommendations_text = ""
        
        if recommendations:
            recommendations_text += "### Recommendations\n\n"
            for i, rec in enumerate(recommendations, 1):
                # Support both dict-shaped recommendations and simple string entries
                if isinstance(rec, str):
                    rec_type = "general"
                    priority = "medium"
                    recommendation = rec
                    actions = []
                    expected_impact = "unknown"
                    rationale = None
                    supporting = []
                    confidence = None
                    expected_uplift = None
                else:
                    rec_type = rec.get("type", "unknown")
                    priority = rec.get("priority", "medium")
                    recommendation = rec.get("recommendation", "")
                    actions = rec.get("actions", [])
                    expected_impact = rec.get("expected_impact", "unknown")
                    rationale = rec.get("rationale")
                    supporting = rec.get("supporting_insights", [])
                    confidence = rec.get("confidence")
                    expected_uplift = rec.get("expected_uplift")

                recommendations_text += f"**{i}. {recommendation}** (Priority: {priority}, Impact: {expected_impact})\n"
                if rationale:
                    recommendations_text += f"- Rationale: {rationale}\n"
                if supporting:
                    recommendations_text += f"- Supporting insights: {', '.join(map(str, supporting))}\n"
                if confidence is not None:
                    recommendations_text += f"- Confidence: {float(confidence):.2f}\n"
                if expected_uplift is not None:
                    try:
                        recommendations_text += f"- Expected uplift (approx): {float(expected_uplift)*100:.0f}%\n"
                    except Exception:
                        recommendations_text += f"- Expected uplift: {expected_uplift}\n"
                if actions:
                    recommendations_text += "Actions:\n"
                    for action in actions:
                        recommendations_text += f"- {action}\n"
                recommendations_text += "\n"
        
        if creative_suggestions:
            recommendations_text += "### Creative Suggestions\n\n"
            for i, suggestion in enumerate(creative_suggestions, 1):
                # Support both dict-shaped suggestions and plain string suggestions
                if isinstance(suggestion, str):
                    suggestion_type = "general"
                    suggestion_text = suggestion
                else:
                    suggestion_type = suggestion.get("type", "unknown")
                    suggestion_text = suggestion.get("suggestion", "")
                recommendations_text += f"**{i}. {suggestion_text}** ({suggestion_type})\n"
                if "creative_elements" in suggestion:
                    recommendations_text += "Elements:\n"
                    for element in suggestion["creative_elements"]:
                        recommendations_text += f"- {element}\n"
                # include optional roas/confidence fields for context
                if isinstance(suggestion, dict) and suggestion.get("roas") is not None:
                    try:
                        recommendations_text += f"- Observed ROAS: {float(suggestion.get('roas')):.2f}\n"
                    except Exception:
                        pass
                recommendations_text += "\n"
        
        return recommendations_text
    
    def _generate_technical_details(self, analysis_results: Dict[str, Any]) -> str:
        """Generate technical details section."""
        technical_text = f"""
### Analysis Configuration
- **Analysis ID:** {analysis_results.get('query', 'unknown')}
- **Duration:** {analysis_results.get('duration', 'unknown')}
- **Timestamp:** {analysis_results.get('timestamp', 'unknown')}

### Data Processing
- **Data Source:** Facebook Ads Data
- **Processing Method:** Statistical Analysis
- **Validation:** Automated Quality Checks

### Agent Workflow
- **Planner Agent:** Workflow orchestration
- **Data Agent:** Data processing and analysis
- **Insight Agent:** Pattern recognition and insight generation
- **Evaluator Agent:** Validation and quality assessment
- **Creative Generator:** Creative recommendations
"""
        return technical_text
    
    def _generate_next_steps(self, analysis_results: Dict[str, Any]) -> str:
        """Generate next steps section."""
        results = analysis_results.get("results", {})
        
        next_steps = [
            "Review and validate insights with business stakeholders",
            "Implement high-priority recommendations",
            "Set up A/B tests for creative recommendations",
            "Monitor performance changes over time",
            "Schedule follow-up analysis in 1-2 weeks"
        ]
        
        if "creative_recommendations" in results:
            creative_recs = results["creative_recommendations"]
            priority = creative_recs.get("priority", {})
            
            if "immediate_actions" in priority:
                immediate_actions = priority["immediate_actions"]
                if immediate_actions:
                    next_steps.insert(0, f"Execute {len(immediate_actions)} immediate actions")
        
        next_steps_text = ""
        for i, step in enumerate(next_steps, 1):
            next_steps_text += f"{i}. {step}\n"
        
        return next_steps_text
    
    def _generate_insights_json(self, analysis_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate insights JSON."""
        results = analysis_results.get("results", {})
        
        insights_data = {
            "analysis_id": analysis_results.get("query", "unknown"),
            "timestamp": analysis_results.get("timestamp", datetime.now().isoformat()),
            "insights": [],
            "patterns": [],
            "recommendations": [],
            "confidence_scores": {}
        }
        
        # Extract insights
        if "insight_generation" in results:
            insight_generation = results["insight_generation"]
            insights_data["insights"] = insight_generation.get("insights", [])
            insights_data["patterns"] = insight_generation.get("patterns", [])
            insights_data["confidence_scores"] = insight_generation.get("confidence", 0.5)
        
        # Extract recommendations
        if "creative_recommendations" in results:
            creative_recommendations = results["creative_recommendations"]
            insights_data["recommendations"] = creative_recommendations.get("recommendations", [])
        
        return insights_data
    
    def _generate_creatives_json(self, analysis_results: Dict[str, Any]) -> Dict[str, Any]:
        """Generate creatives JSON."""
        results = analysis_results.get("results", {})
        
        creatives_data = {
            "analysis_id": analysis_results.get("query", "unknown"),
            "timestamp": analysis_results.get("timestamp", datetime.now().isoformat()),
            "recommendations": [],
            "creative_suggestions": [],
            "templates": [],
            "priority": {}
        }
        
        # Extract creative recommendations
        if "creative_recommendations" in results:
            creative_recommendations = results["creative_recommendations"]
            creatives_data["recommendations"] = creative_recommendations.get("recommendations", [])
            creatives_data["creative_suggestions"] = creative_recommendations.get("creative_suggestions", [])
            creatives_data["templates"] = creative_recommendations.get("templates", [])
            creatives_data["priority"] = creative_recommendations.get("priority", {})
        
        return creatives_data
